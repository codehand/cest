// Code generated by "esc -o /Users/tamgh/ws/src/github.com/codehand/cest/cmd/bindata/esc.go -pkg=bindata /Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates"; DO NOT EDIT.

package bindata

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/call.tmpl": {
		name:    "call.tmpl",
		local:   "/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/call.tmpl",
		size:    241,
		modtime: 1572858974,
		compressed: `
H4sIAAAAAAAC/0SOQWrDQAxFryKMFy0YHaDQA3hTSlvatRjLrsCeFo2SEITuHsY4mdWHP2/el/vEs2SG
LtG6dhHuF7FfwA9OLGfW2sgM+c8Ax/JpekoWYYbunKf6eicBI1qLb7RxxJO7Ul4Yehmg5xVeXgHfSWlj
Yy2HvZeIAR5/296PitUbzJB0KU2/K+riTuPX9Z9xLN+kQpOkCMTG7vF85C0AAP//ZQi8iPEAAAA=
`,
	},

	"/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/function.tmpl": {
		name:    "function.tmpl",
		local:   "/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/function.tmpl",
		size:    2458,
		modtime: 1573612850,
		compressed: `
H4sIAAAAAAAC/7RWTW/jNhA9S79i1sgupMLL3LPwodtNix66LpygeyiKgpFGLlGacslRAoPgfy9IUZ+W
0lyaQ2xR5Lw3b95jYm2JlVAIm6pRBYlabZxLrf0INxXc7YA5l6a3t2Ate0RDX/kJnQNhwG8HQkOQWqu5
OiKwH+rTCRUZ56xloQyqEj46l4bdkxoZwXf+uFBH9piDTRMP+iLoL2AHLFA8o3YuTcKyqID9bB5INwWF
xX71R4GyNO1aQpczQhVWwITNvm7cHTlODiTWhmffZqB3OWN85Y+gKuNTj9ktjb7PvnpWvs1fueYnJNQB
LFDj+jghNqJ1fSIAhqUrdiPEKb4X1Pix/f7HCEbxE3pYoY7x8ILMHXeuykHrmVxR2vajV0SaQbOu5LWg
K+K9IlmSBL38r4UzI90OaBpJpsP5xhW9JlkPeUBqtDL3WtdRgxeu6F5reKprOdPZC3l7C4/7L/s7+L4s
W+8X3KBhYQxVrcFaUUFWa2APzVM7jEzV5AX9yv/GMs+dgz+3QOSHFOLhXGyl3W5TiD8dy76Sc8QOjcqI
mJ/oNkRwHiOInEPqkvVpr8TqaoaBZpjP5YxhM9fOfYjUo8LsNy4bdM52JVbSlljL2vTfARFrfcRGGdwO
BYbsJQuBvHqIeAsR6tr8pgX13U+idbeDD08XQsM+N1WF2r4FMEalHe9eycvYTfn1+l5hUCmHnhnh6Sw5
IWx06+AN3FTBt8ObgkvZLq+xWLBxIqo4tTkx5wC1bqe6BPKpN2Xm973bgRIy959ErEtHHDOxULLKNuNa
JzSGHzG2gn4H7OD98xa64++fN9sJvFDnpm8etd6OwPLBEd0tMYl7eDeLiQ4NW9veTEWtSKgGY2NLDnvV
UteQa54Kqv9U0xCc3mPsIVy/Wf5ptKVVdXxhDb6TBiPGZ25EMfrD1A/3plrylw/lhMNYZykUzgf9Zj7/
E/47jZXEgtgXxPP9Pw2XWV9hOyWUjxn103uLDzvCkewvjSRxlhOykc/g1f8w6irJ9X8YZj4F39D4unap
S9POp/8GAAD//+Xr0Y2aCQAA
`,
	},

	"/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/header.tmpl": {
		name:    "header.tmpl",
		local:   "/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/header.tmpl",
		size:    109,
		modtime: 1573613774,
		compressed: `
H4sIAAAAAAAC/zzLMQoCMRCF4X5OMWylTe5hI15hMM/dIIkhpnu8u4sG7H4++MmMR2nw7UBkjE0y63F/
xg4n023lV0vtrzH9ZOSItsPT5SdviUzXqJDWMg/JSLQs2dn++QkAAP//iVIP320AAAA=
`,
	},

	"/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/inline.tmpl": {
		name:    "inline.tmpl",
		local:   "/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/inline.tmpl",
		size:    49,
		modtime: 1572858974,
		compressed: `
H4sIAAAAAAAC/6quTklNy8xLVVDKzMvJzEtVqq1VqK4uSc0tyEksSVVQSk7MyVFS0AOLpual1NYCAgAA
//+q60H/MQAAAA==
`,
	},

	"/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/inputs.tmpl": {
		name:    "inputs.tmpl",
		local:   "/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/inputs.tmpl",
		size:    152,
		modtime: 1572858974,
		compressed: `
H4sIAAAAAAAC/0yNMQoCQQxFrxKWLSUHEDyAneAJIptZptgomWz1yd1lRoupEh7/vw9sWqopLdU+Z7Ql
E1gLXW/E/a2F7B3Ez/MV2qJlRrDJoRcC1LZ/Zi388GpxH5IOXWzXwcXl0FD/dcX3xsCgfWLyzOcbAAD/
/468z9qYAAAA
`,
	},

	"/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/message.tmpl": {
		name:    "message.tmpl",
		local:   "/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/message.tmpl",
		size:    201,
		modtime: 1572858974,
		compressed: `
H4sIAAAAAAAC/zyN4WqDQBCE//sUiyi0oPsAhT5A/xRpS/9f4mgW9GLuTkNY9t2DB/HXDDPDN6o9BvGg
ckaMbkRJrVmhKgP5ayL+XU8JMUWz+sakCt+bqd4lXYh/cIZsCHvCf48F/O+mFWZ8DPnbzTB7y0Tugvj0
5Zd1B6oG50dQJQ1VmOjjk7hzwc1ICLmXgSoxa16/9XZws7wXqi1l+wwAAP//kC65UskAAAA=
`,
	},

	"/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/results.tmpl": {
		name:    "results.tmpl",
		local:   "/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/results.tmpl",
		size:    168,
		modtime: 1572858974,
		compressed: `
H4sIAAAAAAAC/1yNTQrCQAyFr/Iosyw9gOBS3HsDoRkJlAy8ma5C7i6pRcFVfr4vee6rVDXBROn7NvoU
AXc+7SUoOqPIhssVy+ODI9y1omjEDHexNTf3NrBkc85a82DstH4jG1MW8uQ4hMbv0385A3/uUd8BAAD/
/7BPz2GoAAAA
`,
	},

	"/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates": {
		name:  "templates",
		local: `/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates": {
		_escData["/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/call.tmpl"],
		_escData["/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/function.tmpl"],
		_escData["/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/header.tmpl"],
		_escData["/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/inline.tmpl"],
		_escData["/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/inputs.tmpl"],
		_escData["/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/message.tmpl"],
		_escData["/Users/tamgh/ws/src/github.com/codehand/cest/cmd/templates/results.tmpl"],
	},
}
